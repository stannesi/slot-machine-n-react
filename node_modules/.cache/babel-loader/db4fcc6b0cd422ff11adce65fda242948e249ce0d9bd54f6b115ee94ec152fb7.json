{"ast":null,"code":"var _jsxFileName = \"/Users/nappy.cat/Labs/js.ts.lab/slot-machine-n-react/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Player from \"./models/Player\";\nimport Reel from \"./components/Reel\";\nimport Controls from \"./components/Controls\";\nimport Display from \"./components/Display\";\nimport \"./styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SYMBOL_COUNT = 5;\nconst App = () => {\n  _s();\n  const [player] = useState(new Player(1000));\n\n  // const [balance, setBalance] = useState(1000);\n  const [betAmount, setBetAmount] = useState(50);\n  const [outcome, setOutcome] = useState(\"\");\n  const [reels, setReels] = useState([0, 0, 0]);\n  const [spinning, setSpinning] = useState(false);\n  const handleSpin = () => {\n    if (betAmount > balance) {\n      setOutcome(\"Insufficient balance.\");\n      return;\n    }\n    setBalance(balance - betAmount);\n    setSpinning(true);\n\n    // Simulate spinning\n    const newReels = reels.map(() => Math.floor(Math.random() * SYMBOL_COUNT));\n    setTimeout(() => {\n      setReels(newReels);\n      setSpinning(false);\n      calculateWin(newReels);\n    }, 1000);\n  };\n  const calculateWin = results => {\n    const isWin = results.every(value => value === results[0]);\n    if (isWin) {\n      const winnings = betAmount * 10;\n      setBalance(balance + winnings);\n      setOutcome(`You won $${winnings}!`);\n    } else {\n      setOutcome(\"No win this time.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slot-machine\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Slot Machine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reel-container\",\n      children: reels.map((symbolIndex, index) => /*#__PURE__*/_jsxDEV(Reel, {\n        symbolIndex: symbolIndex,\n        spinning: spinning\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      betAmount: betAmount,\n      setBetAmount: setBetAmount,\n      onSpin: handleSpin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Display, {\n      balance: balance,\n      outcome: outcome\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"b9HsngS6lMAgvTulMFOcnbI1Ay8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Player","Reel","Controls","Display","jsxDEV","_jsxDEV","SYMBOL_COUNT","App","_s","player","betAmount","setBetAmount","outcome","setOutcome","reels","setReels","spinning","setSpinning","handleSpin","balance","setBalance","newReels","map","Math","floor","random","setTimeout","calculateWin","results","isWin","every","value","winnings","className","children","fileName","_jsxFileName","lineNumber","columnNumber","symbolIndex","index","onSpin","_c","$RefreshReg$"],"sources":["/Users/nappy.cat/Labs/js.ts.lab/slot-machine-n-react/src/App.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport logo from './logo.svg';\n\nimport Player from \"./models/Player\";\n\nimport Reel from \"./components/Reel\";\nimport Controls from \"./components/Controls\";\nimport Display from \"./components/Display\";\nimport \"./styles/App.css\";\n\nconst SYMBOL_COUNT = 5;\n\nconst App: React.FC = () => {\n  const [player] = useState(new Player(1000));\n\n  // const [balance, setBalance] = useState(1000);\n  const [betAmount, setBetAmount] = useState(50);\n  const [outcome, setOutcome] = useState(\"\");\n  const [reels, setReels] = useState([0, 0, 0]);\n  const [spinning, setSpinning] = useState(false);\n\n  const handleSpin = () => {\n    if (betAmount > balance) {\n      setOutcome(\"Insufficient balance.\");\n      return;\n    }\n\n    setBalance(balance - betAmount);\n    setSpinning(true);\n\n    // Simulate spinning\n    const newReels = reels.map(() => Math.floor(Math.random() * SYMBOL_COUNT));\n    setTimeout(() => {\n      setReels(newReels);\n      setSpinning(false);\n      calculateWin(newReels);\n    }, 1000);\n  };\n\n  const calculateWin = (results: number[]) => {\n    const isWin = results.every((value) => value === results[0]);\n    if (isWin) {\n      const winnings = betAmount * 10;\n      setBalance(balance + winnings);\n      setOutcome(`You won $${winnings}!`);\n    } else {\n      setOutcome(\"No win this time.\");\n    }\n  };\n\n  return (\n    <div className=\"slot-machine\">\n      <h2>Slot Machine</h2>\n      <div className=\"reel-container\">\n        {reels.map((symbolIndex, index) => (\n          <Reel key={index} symbolIndex={symbolIndex} spinning={spinning} />\n        ))}\n      </div>\n      <Controls betAmount={betAmount} setBetAmount={setBetAmount} onSpin={handleSpin} />\n      <Display balance={balance} outcome={outcome} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}